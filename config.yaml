input:
  csv:
    paths:
      - ./input.csv
    parse_header_row: true

pipeline:
  processors:
    - mapping: |
        meta email = this."Email"
        meta attendee_id = this."Attendee ID"

    - mapping: from "mappings/misc.blobl"

output:
  broker:
    pattern: fan_out
    outputs:
      - broker:
          pattern: fan_out
          outputs:
            # - stdout:
            #     codec: lines
            - file:
                path: output/output.csv
                codec: lines
        processors:
          - mapping: from "mappings/misc.blobl"
          - mapping: |
              root.email = this."Email"
              root.name = this."First Name" + " " + this."Last Name"
              root.company = this."Company/Organization"
              root.attendee_id = this."Attendee ID"

              # Title is empty by default
              root.title = ""

          - mapping: from "mappings/company.blobl"
          - mapping: from "mappings/organizers.blobl"
          - mapping: from "mappings/speakers.blobl"
          - mapping: from "mappings/sponsors.blobl"

          - mapping: |
              map escape_csv {
                root = if this.re_match("[\"\n,]+") {
                  "\"" + this.replace_all("\"", "\"\"") + "\""
                } else {
                  this
                }
              }

              # Extract key/value pairs as an array and sort by the key
              let kvs = this.key_values().sort_by(v -> v.key)

              # Create a header prefix for our output only on the first row
              let header = if count("rows_in_file") == 1 {
                $kvs.map_each(kv -> kv.key.apply("escape_csv")).join(",") + "\n"
              } else { "" }

              root = $header + $kvs.map_each(kv -> kv.value.string().apply("escape_csv")).join(",")

      - file:
          path: output/qrcode/${! meta("attendee_id") }.svg
          codec: all-bytes
        processors:
          - mapping: |
              root = this."Attendee ID"
          - qrcode:
              format: svg
